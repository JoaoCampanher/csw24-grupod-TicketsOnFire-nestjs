name: Test

on:
  push:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy App
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install Dependencies
      run: npm install

    - name: Build Application
      run: npm run build

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: SSH into EC2, Pull Latest Docker Image, and Restart Container
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        SSH_USER: ${{ secrets.SSH_USER }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Set up SSH key and configure SSH
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/id_rsa
        chmod 600 ~/.ssh/id_rsa

        # SSH into EC2 and run commands to update Docker container
        ssh -o StrictHostKeyChecking=no $SSH_USER@$EC2_HOST << 'EOF'
          # Log in to AWS ECR
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $ECR_REGISTRY

          # Pull the latest Docker image from ECR
          docker pull $ECR_REGISTRY/teste:$IMAGE_TAG

          # Stop the currently running container (if exists)
          docker ps -q -f name=teste | xargs -r docker stop

          # Remove the old container (if exists)
          docker ps -a -q -f name=teste | xargs -r docker rm

          # Run the new container
          docker run -d --name teste -p 80:80 $ECR_REGISTRY/teste:$IMAGE_TAG
        EOF
